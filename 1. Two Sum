// Using Hashing [Dictionaries]
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        seen={}
        for i,j in enumerate(nums):
            if j in seen:
                return [seen[j],i]
            rem=target-j
            seen[rem]=i
        return []
        
        
    or
    Is same as:
    
    def twoSum(nums, target):
        seen={}
        for i,j in enumerate(nums):
            if j in seen:
                return [seen[j],i]
            rem=target-j
            seen[rem]=i
        return []
        

Observation:
We tried using greedy technique but failed, why? because here it would be applicable only when the array is sorted, now if we go to sort the array, we would loose
its earlier positions, and the answer would show wrong,
therefore, we would also need to store the earlier positions which would take more more space and time so the hashing technique is preffered over here, which has 
T(n)=O(1) and space complexity as O(n)
